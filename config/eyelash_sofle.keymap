#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <3000>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

&mt {
    flavor = "balanced";
    tapping-term-ms = <200>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <28 29 30 31 27 26>; // List of keys on the right side of the keyboard
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <33 34 35 36 37 38>; // List of keys on the left side of the keyboard
            hold-trigger-on-release;
        };

        scroll_encoder_horizontal: scroll_encoder_horizontal {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_LEFT>, <&msc SCRL_RIGHT>;

            tap-ms = <100>;
            label = "SCROLL_ENCODER_HORIZONTAL";
        };

        mmv2: mmv_for_layer2 {
            compatible = "zmk,behavior-input-two-axis";
            label = "MMV_2";
            #binding-cells = <1>;
            x-input-code = <1>;
            y-input-code = <1>;
            trigger-period-ms = <16>;
            time-to-max-speed-ms = <1000>;
        };

        mmv3: mmv3 {
            compatible = "zmk,behavior-input-two-axis";
            label = "MMV3";
            #binding-cells = <1>;
            x-input-code = <0>;
            y-input-code = <1>;
            time-to-max-speed-ms = <500>;
        };

        ht_hp_150_100: ht_hp_150_100 {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_HP_150_100";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <150>;
            quick-tap-ms = <100>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        ht_hp_100_50: ht_hp_100_50 {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_HP_100_50";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <100>;
            quick-tap-ms = <50>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        ht_hp_2000: ht_hp_2000 {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_HP_2000";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <2000>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        ht_bl_200: ht_bl_200 {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_BL_200";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        ht_bl_100: ht_bl_100 {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_BL_100";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <100>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        ht_bl_50: ht_bl_50 {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_BL_50";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <50>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        ht_bl_2000: ht_bl_2000 {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_BL_2000";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <2000>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        backspace_ht_bl_300_500: backspace_ht_bl_300_500 {
            compatible = "zmk,behavior-hold-tap";
            label = "BACKSPACE_HT_BL_300_500";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <500>;
        };

        backspace_ht_bl_3000_1000: backspace_ht_bl_3000_1000 {
            compatible = "zmk,behavior-hold-tap";
            label = "BACKSPACE_HT_BL_3000_1000";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <3000>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <1000>;
        };
    };

    behaviors {
    };

    combos {
        compatible = "zmk,combos";

        alta {
            bindings = <&sl 1>;
            key-positions = <57 59>;
        };
    };

    macros {
        new_macro: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LA(F4) &kp LG(N4)>,
                <&macro_tap>,
                <&kp LS(T) &kp Y &kp P &kp E>;

            label = "NEW_MACRO";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&kp ESC     &kp N1       &kp N2        &kp N3              &kp N4       &kp N5         &kp UP_ARROW     &kp N6       &kp N7      &kp N8       &kp N9        &kp N0         &kp BACKSPACE
&kp TAB     &kp Q        &kp W         &kp E               &kp R        &kp T          &kp DOWN_ARROW   &ht RC(Y) Y  &kp U       &kp I        &kp O         &kp P          &kp BSLH
&kp LCTRL   &ht LC(A) A  &ht LSHIFT S  &ht LEFT_CONTROL D  &ht LALT F   &kp G          &kp LEFT_ARROW   &kp H        &ht RALT J  &ht RCTRL K  &ht RSHIFT L  &ht RGUI SEMI  &kp ENTER
&kp LSHFT   &ht LC(Z) Z  &ht LC(X) X   &ht LC(C) C         &ht LC(V) V  &kp B          &kp RIGHT_ARROW  &kp N        &kp M       &kp COMMA    &kp DOT       &kp FSLH       &kp RIGHT_SHIFT
&kp C_MUTE  &kp CAPS     &kp LEFT_GUI  &kp LEFT_GUI        &kp ENTER    &lt 1 SPACE    &kp ENTER        &lt 2 ENTER  &kp SPACE   &mo 2        &tog 5        &kp DELETE
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "LAYER0";
        };

        layer_1 {
            bindings = <
&kp GRAVE   &kp F1           &kp F2           &kp F3           &kp F4           &kp F5             &mmv MOVE_UP     &kp F6           &kp F7           &kp F8      &kp F9     &kp F10           &trans
&trans      &kp GRAVE        &mkp LCLK        &mkp MCLK        &mkp RCLK        &mkp MB4           &mmv MOVE_DOWN   &kp PG_UP        &kp END          &kp UP      &kp HOME   &kp MINUS         &kp EQUAL
&trans      &kp TILDE        &trans           &trans           &trans           &mkp MB5           &mmv MOVE_LEFT   &kp PG_DN        &kp LEFT         &kp DOWN    &kp RIGHT  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&trans      &rgb_ug RGB_OFF  &rgb_ug RGB_ON   &rgb_ug RGB_EFF  &rgb_ug RGB_EFR  &rgb_ug RGB_SPI    &mmv MOVE_RIGHT  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &kp INSERT  &kp F11    &kp F12           &trans
&kp C_MUTE  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &trans           &trans           &trans             &mkp LCLK        &trans           &trans           &trans      &trans     &trans
            >;

            display-name = "layer1";
            sensor-bindings = <&scroll_encoder>;
        };

        layer_2 {
            bindings = <
&kp TILDE  &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &mmv2 MOVE_UP     &kp F6           &kp F7             &kp F8      &kp F9     &kp F10      &trans
&trans     &bt BT_CLR    &bt BT_CLR_ALL  &trans        &trans        &trans          &mmv2 MOVE_DOWN   &mmv3 MOVE_DOWN  &mmv3 MOVE_X(100)  &kp F11     &kp F12    &kp UNDER    &kp PLUS
&trans     &out OUT_USB  &out OUT_BLE    &trans        &trans        &trans          &mmv2 MOVE_LEFT   &new_macro       &trans             &trans      &trans     &kp LBRC     &kp RBRC
&trans     &sys_reset    &trans          &bootloader   &trans        &trans          &mmv2 MOVE_RIGHT  &trans           &trans             &sys_reset  &soft_off  &bootloader  &trans
&trans     &trans        &trans          &trans        &trans        &trans          &mkp LCLK         &trans           &trans             &trans      &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder_horizontal>;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        next4 {
            bindings = <
&trans  &trans  &trans  &trans   &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans   &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp S   &mt D F  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans   &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans   &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        copy_from_1 {
            display-name = "L0_5";
            bindings = <
&kp ESC     &kp N1       &kp N2        &kp N3              &kp N4       &kp N5         &kp UP_ARROW     &kp N6       &kp N7      &kp N8       &kp N9        &kp N0         &backspace_ht_bl_300_500 BACKSPACE A
&kp TAB     &kp Q        &kp W         &kp E               &kp R        &kp T          &kp DOWN_ARROW   &ht RC(Y) Y  &kp U       &kp I        &kp O         &kp P          &kp BSLH
&kp LCTRL   &ht LC(A) A  &ht LSHIFT S  &ht LEFT_CONTROL D  &ht LALT F   &kp G          &kp LEFT_ARROW   &kp H        &ht RALT J  &ht RCTRL K  &ht RSHIFT L  &ht RGUI SEMI  &kp ENTER
&kp LSHFT   &ht LC(Z) Z  &ht LC(X) X   &ht LC(C) C         &ht LC(V) V  &kp B          &kp RIGHT_ARROW  &kp N        &kp M       &kp COMMA    &kp DOT       &kp FSLH       &kp RIGHT_SHIFT
&kp C_MUTE  &kp CAPS     &kp LEFT_GUI  &kp LEFT_GUI        &kp ENTER    &lt 1 SPACE    &kp ENTER        &lt 2 ENTER  &kp SPACE   &mo 2        &tog 0        &kp DELETE
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
        };
    };
};
